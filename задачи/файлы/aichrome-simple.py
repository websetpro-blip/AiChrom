#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AiChrome - –ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –±—Ä–∞—É–∑–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä
–ë–ï–ó –õ–ò–®–ù–ò–• –°–õ–û–ñ–ù–û–°–¢–ï–ô, –ü–†–û–°–¢–û –†–ê–ë–û–¢–ê–ï–¢!
"""

import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import json
import os
import sys
import threading
import time
import uuid
import requests
from datetime import datetime
from pathlib import Path
import psutil

class SimpleBrowserManager:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AiChrome - –ü—Ä–æ—Å—Ç–æ–π –±—Ä–∞—É–∑–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä")
        self.root.geometry("1000x600")
        
        # –ü—É—Ç–∏
        self.base_dir = Path(__file__).parent if not getattr(sys, 'frozen', False) else Path(sys.executable).parent
        self.profiles_file = self.base_dir / "profiles.json"
        self.profiles_dir = self.base_dir / "browser_profiles"
        self.profiles_dir.mkdir(exist_ok=True)
        
        # –î–∞–Ω–Ω—ã–µ
        self.profiles = self.load_profiles()
        self.running_browsers = {}
        
        # Chrome path
        self.chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
            "/usr/bin/google-chrome",
            "/usr/bin/chromium-browser"
        ]
        self.chrome_path = self.find_chrome()
        
        self.create_ui()
        self.refresh_table()
        
        if not self.chrome_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Chrome.")
    
    def find_chrome(self):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ Chrome"""
        for path in self.chrome_paths:
            if os.path.exists(path):
                return path
        return None
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(self.root, bg="#2d3748", height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        title = tk.Label(header, text="üåê AiChrome", font=("Arial", 18, "bold"), 
                        fg="white", bg="#2d3748")
        title.pack(side=tk.LEFT, padx=20, pady=15)
        
        subtitle = tk.Label(header, text="–ü—Ä–æ—Å—Ç–æ–π –±—Ä–∞—É–∑–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä ‚Ä¢ –†–ê–ë–û–¢–ê–ï–¢!", 
                           font=("Arial", 10), fg="#a0aec0", bg="#2d3748")
        subtitle.pack(side=tk.LEFT, padx=(0, 20), pady=15)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(self.root, bg="#f7fafc", height=50)
        btn_frame.pack(fill=tk.X, pady=10)
        btn_frame.pack_propagate(False)
        
        tk.Button(btn_frame, text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", command=self.create_profile,
                 bg="#48bb78", fg="white", font=("Arial", 10, "bold"), 
                 padx=20, pady=8).pack(side=tk.LEFT, padx=10)
        
        tk.Button(btn_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.launch_browser,
                 bg="#4299e1", fg="white", font=("Arial", 10, "bold"), 
                 padx=20, pady=8).pack(side=tk.LEFT, padx=10)
        
        tk.Button(btn_frame, text="üß™ –¢–µ—Å—Ç IP", command=self.test_proxy,
                 bg="#ed8936", fg="white", font=("Arial", 10, "bold"), 
                 padx=20, pady=8).pack(side=tk.LEFT, padx=10)
        
        tk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_profile,
                 bg="#f56565", fg="white", font=("Arial", 10, "bold"), 
                 padx=20, pady=8).pack(side=tk.RIGHT, padx=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.create_table()
        
        # –°—Ç–∞—Ç—É—Å
        self.status = tk.Label(self.root, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                              bg="#edf2f7", font=("Arial", 9), anchor="w")
        self.status.pack(fill=tk.X, side=tk.BOTTOM)
    
    def create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        table_frame = tk.Frame(self.root)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        columns = ("name", "proxy", "status", "created")
        self.tree = ttk.Treeview(table_frame, columns=columns, show="headings")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("proxy", text="–ü—Ä–æ–∫—Å–∏")
        self.tree.heading("status", text="–°—Ç–∞—Ç—É—Å")
        self.tree.heading("created", text="–°–æ–∑–¥–∞–Ω")
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.column("name", width=200)
        self.tree.column("proxy", width=300)
        self.tree.column("status", width=100)
        self.tree.column("created", width=150)
        
        self.tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scroll = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scroll.set)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
    
    def load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        if self.profiles_file.exists():
            try:
                with open(self.profiles_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def save_profiles(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            with open(self.profiles_file, 'w', encoding='utf-8') as f:
                json.dump(self.profiles, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
            return False
    
    def refresh_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        for profile in self.profiles:
            proxy_str = ""
            if profile.get("proxy_host"):
                proxy_str = f"{profile.get('proxy_type', 'HTTP')}://{profile['proxy_host']}:{profile.get('proxy_port', 80)}"
            
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if profile.get("id") in self.running_browsers else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            self.tree.insert("", "end", values=(
                profile.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
                proxy_str,
                status,
                profile.get("created", "")
            ), tags=(profile.get("id"),))
    
    def create_profile(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        ProfileDialog(self.root, self)
    
    def get_selected_profile(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å")
            return None
        
        tags = self.tree.item(selection[0])["tags"]
        if not tags:
            return None
        
        profile_id = tags[0]
        return next((p for p in self.profiles if p["id"] == profile_id), None)
    
    def delete_profile(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = self.get_selected_profile()
        if not profile:
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile['name']}'?"):
            # –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if profile["id"] in self.running_browsers:
                try:
                    self.running_browsers[profile["id"]].terminate()
                    del self.running_browsers[profile["id"]]
                except:
                    pass
            
            # –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            profile_dir = self.profiles_dir / profile["id"]
            if profile_dir.exists():
                try:
                    import shutil
                    shutil.rmtree(profile_dir)
                except:
                    pass
            
            # –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            self.profiles.remove(profile)
            self.save_profiles()
            self.refresh_table()
            self.update_status(f"–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: {profile['name']}")
    
    def launch_browser(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        profile = self.get_selected_profile()
        if not profile or not self.chrome_path:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
        if profile["id"] in self.running_browsers:
            proc = self.running_browsers[profile["id"]]
            if proc.poll() is None:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
                return
            else:
                del self.running_browsers[profile["id"]]
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.start_chrome, args=(profile,), daemon=True).start()
    
    def start_chrome(self, profile):
        """–ó–∞–ø—É—Å–∫ Chrome —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            profile_dir = self.profiles_dir / profile["id"]
            profile_dir.mkdir(exist_ok=True)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã Chrome
            args = [
                self.chrome_path,
                f"--user-data-dir={profile_dir}",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-popup-blocking",
                f"--user-agent={profile.get('user_agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')}",
                f"--window-size={profile.get('width', 1280)},{profile.get('height', 800)}"
            ]
            
            # –ü—Ä–æ–∫—Å–∏
            if profile.get("proxy_host") and profile.get("proxy_port"):
                proxy_type = profile.get("proxy_type", "http").lower()
                proxy_url = f"{proxy_type}://{profile['proxy_host']}:{profile['proxy_port']}"
                args.append(f"--proxy-server={proxy_url}")
                
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
                if profile.get("proxy_user") and profile.get("proxy_pass"):
                    self.create_proxy_extension(profile)
                    ext_dir = self.profiles_dir / profile["id"] / "proxy_auth_extension"
                    args.append(f"--load-extension={ext_dir}")
            
            self.root.after(0, lambda: self.update_status(f"–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞: {profile['name']}"))
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = subprocess.Popen(args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            self.running_browsers[profile["id"]] = process
            
            self.root.after(0, lambda: self.update_status(f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω: {profile['name']} (PID: {process.pid})"))
            self.root.after(0, self.refresh_table)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.wait()
            
            # –£–±–æ—Ä–∫–∞
            if profile["id"] in self.running_browsers:
                del self.running_browsers[profile["id"]]
            
            self.root.after(0, lambda: self.update_status(f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç: {profile['name']}"))
            self.root.after(0, self.refresh_table)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}"))
    
    def create_proxy_extension(self, profile):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            ext_dir = self.profiles_dir / profile["id"] / "proxy_auth_extension"
            ext_dir.mkdir(parents=True, exist_ok=True)
            
            # manifest.json
            manifest = {
                "manifest_version": 3,
                "name": "Proxy Auth",
                "version": "1.0",
                "permissions": ["proxy", "webRequest", "webRequestAuthProvider", "storage"],
                "host_permissions": ["<all_urls>"],
                "background": {"service_worker": "background.js"}
            }
            
            with open(ext_dir / "manifest.json", "w", encoding="utf-8") as f:
                json.dump(manifest, f, indent=2)
            
            # background.js
            bg_script = f"""
chrome.webRequest.onAuthRequired.addListener(
    function(details, callback) {{
        callback({{
            authCredentials: {{
                username: "{profile.get('proxy_user', '')}",
                password: "{profile.get('proxy_pass', '')}"
            }}
        }});
    }},
    {{urls: ["<all_urls>"]}},
    ["blocking"]
);
"""
            with open(ext_dir / "background.js", "w", encoding="utf-8") as f:
                f.write(bg_script)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
    
    def test_proxy(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        profile = self.get_selected_profile()
        if not profile:
            return
        
        if not profile.get("proxy_host"):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏")
            return
        
        self.update_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏...")
        threading.Thread(target=self.check_proxy, args=(profile,), daemon=True).start()
    
    def check_proxy(self, profile):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        try:
            proxy_type = profile.get("proxy_type", "http").lower()
            proxy_url = f"{proxy_type}://{profile['proxy_host']}:{profile['proxy_port']}"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if profile.get("proxy_user"):
                proxy_url = f"{proxy_type}://{profile['proxy_user']}:{profile.get('proxy_pass', '')}@{profile['proxy_host']}:{profile['proxy_port']}"
            
            proxies = {
                "http": proxy_url,
                "https": proxy_url
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
            response = requests.get("https://api.ipify.org?format=json", 
                                  proxies=proxies, timeout=10)
            
            if response.status_code == 200:
                ip_data = response.json()
                ip = ip_data.get("ip", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
                try:
                    geo_response = requests.get(f"http://ip-api.com/json/{ip}", timeout=5)
                    if geo_response.status_code == 200:
                        geo_data = geo_response.json()
                        country = geo_data.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        city = geo_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        msg = f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nIP: {ip}\n–°—Ç—Ä–∞–Ω–∞: {country}\n–ì–æ—Ä–æ–¥: {city}"
                    else:
                        msg = f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nIP: {ip}"
                except:
                    msg = f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nIP: {ip}"
                
                self.root.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞", msg))
                self.root.after(0, lambda: self.update_status(f"–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {ip}"))
            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"))
                self.root.after(0, lambda: self.update_status("–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"))
                
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}"))
            self.root.after(0, lambda: self.update_status("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏"))
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status.config(text=f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


class ProfileDialog:
    def __init__(self, parent, manager):
        self.manager = manager
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        self.dialog.geometry("600x700")
        self.dialog.resizable(False, False)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.center_window()
        
        self.create_ui()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (700 // 2)
        self.dialog.geometry(f"600x700+{x}+{y}")
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(self.dialog, bg="#4299e1", height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        title = tk.Label(header, text="‚ûï –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", font=("Arial", 16, "bold"), 
                        fg="white", bg="#4299e1")
        title.pack(pady=15)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
        main_frame = tk.Frame(self.dialog, bg="#f7fafc")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        tk.Label(main_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:", font=("Arial", 10, "bold"), 
                bg="#f7fafc").pack(anchor=tk.W, pady=(0, 5))
        self.name_var = tk.StringVar()
        tk.Entry(main_frame, textvariable=self.name_var, font=("Arial", 11), 
                width=50).pack(fill=tk.X, pady=(0, 15))
        
        # User-Agent
        tk.Label(main_frame, text="User-Agent:", font=("Arial", 10, "bold"), 
                bg="#f7fafc").pack(anchor=tk.W, pady=(0, 5))
        ua_frame = tk.Frame(main_frame, bg="#f7fafc")
        ua_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.ua_var = tk.StringVar()
        tk.Entry(ua_frame, textvariable=self.ua_var, font=("Arial", 9)).pack(side=tk.LEFT, fill=tk.X, expand=True)
        tk.Button(ua_frame, text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", command=self.random_ua, 
                 bg="#ed8936", fg="white", font=("Arial", 9)).pack(side=tk.RIGHT, padx=(10, 0))
        
        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        tk.Label(main_frame, text="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞:", font=("Arial", 10, "bold"), 
                bg="#f7fafc").pack(anchor=tk.W, pady=(0, 5))
        size_frame = tk.Frame(main_frame, bg="#f7fafc")
        size_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.width_var = tk.StringVar(value="1280")
        self.height_var = tk.StringVar(value="800")
        tk.Entry(size_frame, textvariable=self.width_var, width=10, font=("Arial", 11)).pack(side=tk.LEFT)
        tk.Label(size_frame, text=" √ó ", font=("Arial", 12, "bold"), bg="#f7fafc").pack(side=tk.LEFT)
        tk.Entry(size_frame, textvariable=self.height_var, width=10, font=("Arial", 11)).pack(side=tk.LEFT)
        
        # –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        proxy_frame = tk.LabelFrame(main_frame, text="üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏", 
                                   font=("Arial", 10, "bold"), bg="#f7fafc", padx=15, pady=15)
        proxy_frame.pack(fill=tk.X, pady=15)
        
        # –¢–∏–ø –ø—Ä–æ–∫—Å–∏
        tk.Label(proxy_frame, text="–¢–∏–ø:", bg="#f7fafc").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.proxy_type_var = tk.StringVar(value="http")
        ttk.Combobox(proxy_frame, textvariable=self.proxy_type_var, 
                    values=["http", "https", "socks4", "socks5"], 
                    state="readonly", width=10).grid(row=0, column=1, sticky=tk.W, padx=10)
        
        # –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç
        tk.Label(proxy_frame, text="–•–æ—Å—Ç:", bg="#f7fafc").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.proxy_host_var = tk.StringVar()
        tk.Entry(proxy_frame, textvariable=self.proxy_host_var, width=25, 
                font=("Arial", 11)).grid(row=1, column=1, sticky=tk.W, padx=10)
        
        tk.Label(proxy_frame, text="–ü–æ—Ä—Ç:", bg="#f7fafc").grid(row=1, column=2, sticky=tk.W, padx=(20, 0))
        self.proxy_port_var = tk.StringVar()
        tk.Entry(proxy_frame, textvariable=self.proxy_port_var, width=10, 
                font=("Arial", 11)).grid(row=1, column=3, sticky=tk.W, padx=10)
        
        # –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        tk.Label(proxy_frame, text="–õ–æ–≥–∏–Ω:", bg="#f7fafc").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.proxy_user_var = tk.StringVar()
        tk.Entry(proxy_frame, textvariable=self.proxy_user_var, width=25, 
                font=("Arial", 11)).grid(row=2, column=1, sticky=tk.W, padx=10)
        
        tk.Label(proxy_frame, text="–ü–∞—Ä–æ–ª—å:", bg="#f7fafc").grid(row=2, column=2, sticky=tk.W, padx=(20, 0))
        self.proxy_pass_var = tk.StringVar()
        tk.Entry(proxy_frame, textvariable=self.proxy_pass_var, width=10, show="*",
                font=("Arial", 11)).grid(row=2, column=3, sticky=tk.W, padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        proxy_btn_frame = tk.Frame(proxy_frame, bg="#f7fafc")
        proxy_btn_frame.grid(row=3, column=0, columnspan=4, pady=15, sticky=tk.W+tk.E)
        
        tk.Button(proxy_btn_frame, text="üá∫üá∏ –°–®–ê –ø—Ä–æ–∫—Å–∏", command=lambda: self.get_proxy("US"),
                 bg="#4299e1", fg="white", font=("Arial", 9)).pack(side=tk.LEFT, padx=5)
        tk.Button(proxy_btn_frame, text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", command=lambda: self.get_proxy("DE"), 
                 bg="#4299e1", fg="white", font=("Arial", 9)).pack(side=tk.LEFT, padx=5)
        tk.Button(proxy_btn_frame, text="üåç –õ—é–±–æ–π", command=lambda: self.get_proxy(""), 
                 bg="#4299e1", fg="white", font=("Arial", 9)).pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(self.dialog, bg="#f7fafc")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=self.dialog.destroy,
                 bg="#a0aec0", fg="white", font=("Arial", 10), 
                 padx=20, pady=8).pack(side=tk.RIGHT)
        
        tk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_profile,
                 bg="#48bb78", fg="white", font=("Arial", 10, "bold"), 
                 padx=20, pady=8).pack(side=tk.RIGHT, padx=(0, 10))
        
        tk.Button(btn_frame, text="üé≤ –°–ª—É—á–∞–π–Ω–æ –≤—Å–µ", command=self.randomize_all,
                 bg="#ed8936", fg="white", font=("Arial", 10), 
                 padx=20, pady=8).pack(side=tk.LEFT)
    
    def random_ua(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent"""
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0"
        ]
        import random
        self.ua_var.set(random.choice(user_agents))
    
    def randomize_all(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        import random
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        if not self.name_var.get():
            names = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω—ã–π", "–¢–µ—Å—Ç", "–ü–æ–∫—É–ø–∫–∏", "–°–æ—Ü—Å–µ—Ç–∏", "–ò–≥—Ä—ã", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
            self.name_var.set(f"{random.choice(names)} {random.randint(100, 999)}")
        
        # –°–ª—É—á–∞–π–Ω—ã–π UA
        self.random_ua()
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        sizes = [(1920, 1080), (1366, 768), (1280, 800), (1440, 900), (1600, 900)]
        w, h = random.choice(sizes)
        self.width_var.set(str(w))
        self.height_var.set(str(h))
    
    def get_proxy(self, country):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        self.manager.update_status(f"–ü–æ–∏—Å–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {country or '–ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã'}...")
        
        def fetch_proxy():
            # –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–æ–º–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
            working_proxies = {
                "US": [
                    ("198.199.86.11", "8080"),
                    ("159.89.195.243", "8080"),
                    ("167.99.83.205", "8080"),
                    ("178.128.113.118", "8080"),
                    ("104.248.90.212", "8080")
                ],
                "DE": [
                    ("51.75.147.41", "3128"),
                    ("195.154.84.106", "5566"),
                    ("167.86.102.121", "3128")
                ],
                "": [  # –õ—é–±—ã–µ
                    ("103.152.112.162", "80"),
                    ("45.77.252.210", "8080"),
                    ("198.199.86.11", "8080"),
                    ("159.89.195.243", "8080")
                ]
            }
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ API
                url = "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"
                response = requests.get(url, timeout=10)
                
                if response.status_code == 200:
                    lines = response.text.strip().split('\n')
                    fresh_proxies = []
                    
                    for line in lines[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ)
                        if ':' in line.strip():
                            parts = line.strip().split(':')
                            if len(parts) == 2 and parts[1].isdigit():
                                fresh_proxies.append((parts[0], parts[1]))
                    
                    if fresh_proxies:
                        import random
                        host, port = random.choice(fresh_proxies)
                        self.dialog.after(0, lambda: self.apply_proxy(host, port))
                        self.manager.update_status(f"–ù–∞–π–¥–µ–Ω —Å–≤–µ–∂–∏–π –ø—Ä–æ–∫—Å–∏: {host}:{port}")
                        return
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–∫—Å–∏: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤–µ–¥–æ–º–æ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
            proxy_list = working_proxies.get(country, working_proxies[""])
            
            import random
            host, port = random.choice(proxy_list)
            self.dialog.after(0, lambda: self.apply_proxy(host, port))
            self.manager.update_status(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {host}:{port}")
        
        threading.Thread(target=fetch_proxy, daemon=True).start()
    
    def apply_proxy(self, host, port):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        self.proxy_host_var.set(host)
        self.proxy_port_var.set(port)
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Å–∏: {host}:{port}")
    
    def save_profile(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.name_var.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        try:
            width = int(self.width_var.get())
            height = int(self.height_var.get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = {
            "id": str(uuid.uuid4()),
            "name": self.name_var.get().strip(),
            "user_agent": self.ua_var.get().strip() or "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "width": width,
            "height": height,
            "proxy_type": self.proxy_type_var.get(),
            "proxy_host": self.proxy_host_var.get().strip(),
            "proxy_port": self.proxy_port_var.get().strip(),
            "proxy_user": self.proxy_user_var.get().strip(),
            "proxy_pass": self.proxy_pass_var.get().strip(),
            "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.manager.profiles.append(profile)
        if self.manager.save_profiles():
            self.manager.refresh_table()
            self.manager.update_status(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile['name']}")
            self.dialog.destroy()


if __name__ == "__main__":
    try:
        app = SimpleBrowserManager()
        app.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")