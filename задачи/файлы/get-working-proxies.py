#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏
–ë–ï–ó –°–õ–û–ñ–ù–û–°–¢–ï–ô - –ü–†–û–°–¢–û –†–ê–ë–û–¢–ê–ï–¢!
"""

import requests
import threading
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

def test_proxy(proxy_line):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    try:
        if ':' not in proxy_line:
            return None
        
        host, port = proxy_line.strip().split(':', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –ø—Ä–æ–∫—Å–∏
        proxy_dict = {
            "http": f"http://{host}:{port}",
            "https": f"http://{host}:{port}"
        }
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ipify
        response = requests.get("https://api.ipify.org?format=json", 
                              proxies=proxy_dict, timeout=5)
        
        if response.status_code == 200:
            ip_data = response.json()
            real_ip = ip_data.get("ip")
            
            if real_ip:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É
                try:
                    geo_response = requests.get(f"http://ip-api.com/json/{real_ip}", 
                                              timeout=3)
                    if geo_response.status_code == 200:
                        geo_data = geo_response.json()
                        country = geo_data.get("countryCode", "XX")
                        return f"{host}:{port} -> {real_ip} ({country})"
                except:
                    pass
                
                return f"{host}:{port} -> {real_ip}"
    
    except Exception:
        pass
    
    return None

def get_fresh_proxies():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üîç –ü–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–∫—Å–∏...")
    
    sources = [
        "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt",
        "https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt",
        "https://api.proxyscrape.com/v2/?request=get&format=textplain&protocol=http&timeout=5000&country=all",
    ]
    
    all_proxies = []
    
    for source in sources:
        try:
            print(f"üì° –ó–∞–≥—Ä—É–∂–∞—é –∏–∑: {source}")
            response = requests.get(source, timeout=15)
            
            if response.status_code == 200:
                lines = response.text.strip().split('\n')
                valid_lines = [line.strip() for line in lines 
                             if ':' in line and not line.startswith('#')]
                all_proxies.extend(valid_lines[:100])  # –ë–µ—Ä–µ–º –ø–æ 100 –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(valid_lines)} –ø—Ä–æ–∫—Å–∏")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_proxies = list(set(all_proxies))
    print(f"üìã –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {len(unique_proxies)}")
    
    return unique_proxies

def validate_proxies(proxy_list, max_workers=50, limit=30):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ (–º–∞–∫—Å–∏–º—É–º {limit} —Ä–∞–±–æ—á–∏—Ö)...")
    
    working_proxies = []
    tested_count = 0
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        futures = {executor.submit(test_proxy, proxy): proxy for proxy in proxy_list}
        
        for future in as_completed(futures):
            tested_count += 1
            result = future.result()
            
            if result:
                working_proxies.append(result)
                print(f"‚úÖ {result}")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if len(working_proxies) >= limit:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {limit} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫")
                    break
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if tested_count % 20 == 0:
                print(f"üîÑ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {tested_count}, –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {len(working_proxies)}")
    
    return working_proxies

def save_working_proxies(working_proxies):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª"""
    if working_proxies:
        with open("working_proxies.txt", "w", encoding="utf-8") as f:
            for proxy in working_proxies:
                f.write(proxy + "\n")
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(working_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –≤ working_proxies.txt")
        return True
    
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä—â–∏–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏
    proxy_list = get_fresh_proxies()
    
    if not proxy_list:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    working_proxies = validate_proxies(proxy_list, max_workers=50, limit=30)
    
    if working_proxies:
        print(f"\nüéâ –ù–∞–π–¥–µ–Ω–æ {len(working_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏:")
        for proxy in working_proxies:
            print(f"  {proxy}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_working_proxies(working_proxies)
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ working_proxies.txt")
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")

if __name__ == "__main__":
    main()