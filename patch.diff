*** Begin Patch
*** Update File: worker_chrome.py
@@
-from proxy.models import Proxy
-from tools.chrome_dist import get_chrome_path
-from tools.lock_manager import ProfileLock
-from tools.logging_setup import app_root, get_logger
-import tools.worker_chrome as worker_tools
+from proxy.models import Proxy
+from tools.chrome_dist import get_chrome_path
+from tools.lock_manager import ProfileLock
+from tools.logging_setup import app_root, get_logger
+import tools.worker_chrome as worker_tools
+import atexit
+import socket
+import sys
+import time
@@
 def _ensure_text(path: Path, payload: str) -> None:
     path.write_text(payload, encoding="utf-8")
+
+
+# -------- Local proxy wrapper (pproxy) to avoid Chrome auth dialogs ---------
+_LOCAL_WRAPPERS: dict[str, subprocess.Popen] = {}
+
+
+def _pick_free_port() -> int:
+    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
+        s.bind(("127.0.0.1", 0))
+        return s.getsockname()[1]
+
+
+def _ensure_pproxy() -> None:
+    try:
+        import pproxy  # noqa: F401
+    except Exception:
+        try:
+            subprocess.check_call([sys.executable, "-m", "pip", "install", "--disable-pip-version-check", "pproxy>=2.7"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
+        except Exception:
+            subprocess.check_call([sys.executable, "-m", "pip", "install", "pproxy>=2.7"])  # may raise
+
+
+def _start_local_proxy_wrapper(profile_id: str, proxy_scheme: str, host: str, port: int, user: str, password: str) -> tuple[str, subprocess.Popen]:
+    """Run local HTTP proxy on 127.0.0.1 that authenticates to upstream.
+    Returns chrome_proxy_url and process handle.
+    """
+    _ensure_pproxy()
+    local_port = _pick_free_port()
+    upstream = f"{proxy_scheme}://{user}:{password}@{host}:{int(port)}"
+    listen = f"http://127.0.0.1:{local_port}"
+    cmd = [sys.executable, "-m", "pproxy", "-l", listen, "-r", upstream, "-q"]
+    flags = getattr(subprocess, "CREATE_NO_WINDOW", 0)
+    proc = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, creationflags=flags)
+    time.sleep(0.5)
+    chrome_proxy = f"http://127.0.0.1:{local_port}"
+    _LOCAL_WRAPPERS[str(profile_id)] = proc
+    log.info("Started local proxy wrapper for profile %s on %s", profile_id, chrome_proxy)
+    return chrome_proxy, proc
+
+
+def _stop_local_proxy_wrapper(profile_id: str) -> None:
+    proc = _LOCAL_WRAPPERS.pop(str(profile_id), None)
+    if proc and proc.poll() is None:
+        try:
+            proc.terminate()
+            proc.wait(timeout=3)
+        except Exception:
+            try:
+                proc.kill()
+            except Exception:
+                pass
+
+
+atexit.register(lambda: [ _stop_local_proxy_wrapper(pid) for pid in list(_LOCAL_WRAPPERS.keys()) ])
*** End Patch
